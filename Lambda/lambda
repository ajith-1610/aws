import boto3

def lambda_handler(event, context):
    region = "us-east-1"  # change to your AWS region
    ec2 = boto3.client("ec2", region_name=region)

    results = {
        "deleted_volumes": [],
        "deleted_snapshots": [],
        "errors": []
    }

    try:
        # Step 1: Find unattached volumes (status = available)
        volumes = ec2.describe_volumes(
            Filters=[{"Name": "status", "Values": ["available"]}]
        )["Volumes"]

        for volume in volumes:
            volume_id = volume["VolumeId"]

            # Step 2: Find snapshots created from this volume
            snapshots = ec2.describe_snapshots(
                Filters=[{"Name": "volume-id", "Values": [volume_id]}],
                OwnerIds=["self"]
            )["Snapshots"]

            # Delete snapshots for this volume
            for snap in snapshots:
                snap_id = snap["SnapshotId"]
                try:
                    ec2.delete_snapshot(SnapshotId=snap_id)
                    results["deleted_snapshots"].append(snap_id)
                except Exception as e:
                    results["errors"].append(f"Snapshot {snap_id}: {str(e)}")

            # Step 3: Delete the volume itself
            try:
                ec2.delete_volume(VolumeId=volume_id)
                results["deleted_volumes"].append(volume_id)
            except Exception as e:
                results["errors"].append(f"Volume {volume_id}: {str(e)}")

        # Step 4: Delete unattached snapshots (not linked to any volume)
        all_snaps = ec2.describe_snapshots(OwnerIds=["self"])["Snapshots"]

        for snap in all_snaps:
            snap_id = snap["SnapshotId"]
            if "VolumeId" not in snap or not snap["VolumeId"]:
                # Snapshot not linked to any volume
                try:
                    ec2.delete_snapshot(SnapshotId=snap_id)
                    results["deleted_snapshots"].append(snap_id)
                except Exception as e:
                    results["errors"].append(f"Snapshot {snap_id}: {str(e)}")

        return {
            "statusCode": 200,
            "body": results
        }

    except Exception as e:
        return {
            "statusCode": 500,
            "body": f"Error: {str(e)}"
        }
